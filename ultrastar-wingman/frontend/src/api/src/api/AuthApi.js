/**
 * UltraStar Wingman
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BearerResponse from '../model/BearerResponse';
import BodyResetForgotPasswordAuthForgotPasswordPost from '../model/BodyResetForgotPasswordAuthForgotPasswordPost';
import BodyResetResetPasswordAuthResetPasswordPost from '../model/BodyResetResetPasswordAuthResetPasswordPost';
import BodyVerifyRequestTokenAuthRequestVerifyTokenPost from '../model/BodyVerifyRequestTokenAuthRequestVerifyTokenPost';
import BodyVerifyVerifyAuthVerifyPost from '../model/BodyVerifyVerifyAuthVerifyPost';
import ErrorModel from '../model/ErrorModel';
import HTTPValidationError from '../model/HTTPValidationError';
import UserCreate from '../model/UserCreate';
import UserRead from '../model/UserRead';

/**
* Auth service.
* @module api/AuthApi
* @version 1.1.0
*/
export default class AuthApi {

    /**
    * Constructs a new AuthApi. 
    * @alias module:api/AuthApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the authJwtLoginAuthJwtLoginPost operation.
     * @callback module:api/AuthApi~authJwtLoginAuthJwtLoginPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BearerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Auth:Jwt.Login
     * @param {String} username 
     * @param {String} password 
     * @param {Object} opts Optional parameters
     * @param {String} [grantType] 
     * @param {String} [scope = '')] 
     * @param {String} [clientId] 
     * @param {String} [clientSecret] 
     * @param {module:api/AuthApi~authJwtLoginAuthJwtLoginPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BearerResponse}
     */
    authJwtLoginAuthJwtLoginPost(username, password, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling authJwtLoginAuthJwtLoginPost");
      }
      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling authJwtLoginAuthJwtLoginPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'grant_type': opts['grantType'],
        'username': username,
        'password': password,
        'scope': opts['scope'],
        'client_id': opts['clientId'],
        'client_secret': opts['clientSecret']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = BearerResponse;
      return this.apiClient.callApi(
        '/auth/jwt/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authJwtLogoutAuthJwtLogoutPost operation.
     * @callback module:api/AuthApi~authJwtLogoutAuthJwtLogoutPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Auth:Jwt.Logout
     * @param {module:api/AuthApi~authJwtLogoutAuthJwtLogoutPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    authJwtLogoutAuthJwtLogoutPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/auth/jwt/logout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerRegisterAuthRegisterPost operation.
     * @callback module:api/AuthApi~registerRegisterAuthRegisterPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register:Register
     * @param {module:model/UserCreate} userCreate 
     * @param {module:api/AuthApi~registerRegisterAuthRegisterPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserRead}
     */
    registerRegisterAuthRegisterPost(userCreate, callback) {
      let postBody = userCreate;
      // verify the required parameter 'userCreate' is set
      if (userCreate === undefined || userCreate === null) {
        throw new Error("Missing the required parameter 'userCreate' when calling registerRegisterAuthRegisterPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserRead;
      return this.apiClient.callApi(
        '/auth/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetForgotPasswordAuthForgotPasswordPost operation.
     * @callback module:api/AuthApi~resetForgotPasswordAuthForgotPasswordPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset:Forgot Password
     * @param {module:model/BodyResetForgotPasswordAuthForgotPasswordPost} bodyResetForgotPasswordAuthForgotPasswordPost 
     * @param {module:api/AuthApi~resetForgotPasswordAuthForgotPasswordPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    resetForgotPasswordAuthForgotPasswordPost(bodyResetForgotPasswordAuthForgotPasswordPost, callback) {
      let postBody = bodyResetForgotPasswordAuthForgotPasswordPost;
      // verify the required parameter 'bodyResetForgotPasswordAuthForgotPasswordPost' is set
      if (bodyResetForgotPasswordAuthForgotPasswordPost === undefined || bodyResetForgotPasswordAuthForgotPasswordPost === null) {
        throw new Error("Missing the required parameter 'bodyResetForgotPasswordAuthForgotPasswordPost' when calling resetForgotPasswordAuthForgotPasswordPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/auth/forgot-password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetResetPasswordAuthResetPasswordPost operation.
     * @callback module:api/AuthApi~resetResetPasswordAuthResetPasswordPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset:Reset Password
     * @param {module:model/BodyResetResetPasswordAuthResetPasswordPost} bodyResetResetPasswordAuthResetPasswordPost 
     * @param {module:api/AuthApi~resetResetPasswordAuthResetPasswordPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    resetResetPasswordAuthResetPasswordPost(bodyResetResetPasswordAuthResetPasswordPost, callback) {
      let postBody = bodyResetResetPasswordAuthResetPasswordPost;
      // verify the required parameter 'bodyResetResetPasswordAuthResetPasswordPost' is set
      if (bodyResetResetPasswordAuthResetPasswordPost === undefined || bodyResetResetPasswordAuthResetPasswordPost === null) {
        throw new Error("Missing the required parameter 'bodyResetResetPasswordAuthResetPasswordPost' when calling resetResetPasswordAuthResetPasswordPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/auth/reset-password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyRequestTokenAuthRequestVerifyTokenPost operation.
     * @callback module:api/AuthApi~verifyRequestTokenAuthRequestVerifyTokenPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify:Request-Token
     * @param {module:model/BodyVerifyRequestTokenAuthRequestVerifyTokenPost} bodyVerifyRequestTokenAuthRequestVerifyTokenPost 
     * @param {module:api/AuthApi~verifyRequestTokenAuthRequestVerifyTokenPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    verifyRequestTokenAuthRequestVerifyTokenPost(bodyVerifyRequestTokenAuthRequestVerifyTokenPost, callback) {
      let postBody = bodyVerifyRequestTokenAuthRequestVerifyTokenPost;
      // verify the required parameter 'bodyVerifyRequestTokenAuthRequestVerifyTokenPost' is set
      if (bodyVerifyRequestTokenAuthRequestVerifyTokenPost === undefined || bodyVerifyRequestTokenAuthRequestVerifyTokenPost === null) {
        throw new Error("Missing the required parameter 'bodyVerifyRequestTokenAuthRequestVerifyTokenPost' when calling verifyRequestTokenAuthRequestVerifyTokenPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/auth/request-verify-token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyVerifyAuthVerifyPost operation.
     * @callback module:api/AuthApi~verifyVerifyAuthVerifyPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify:Verify
     * @param {module:model/BodyVerifyVerifyAuthVerifyPost} bodyVerifyVerifyAuthVerifyPost 
     * @param {module:api/AuthApi~verifyVerifyAuthVerifyPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserRead}
     */
    verifyVerifyAuthVerifyPost(bodyVerifyVerifyAuthVerifyPost, callback) {
      let postBody = bodyVerifyVerifyAuthVerifyPost;
      // verify the required parameter 'bodyVerifyVerifyAuthVerifyPost' is set
      if (bodyVerifyVerifyAuthVerifyPost === undefined || bodyVerifyVerifyAuthVerifyPost === null) {
        throw new Error("Missing the required parameter 'bodyVerifyVerifyAuthVerifyPost' when calling verifyVerifyAuthVerifyPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserRead;
      return this.apiClient.callApi(
        '/auth/verify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
