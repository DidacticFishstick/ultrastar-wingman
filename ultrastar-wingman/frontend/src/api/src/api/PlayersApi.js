/**
 * UltraStar Wingman
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BasicResponse from '../model/BasicResponse';
import HTTPValidationError from '../model/HTTPValidationError';
import PlayerCreation from '../model/PlayerCreation';
import PlayerList from '../model/PlayerList';

/**
* Players service.
* @module api/PlayersApi
* @version 1.1.0
*/
export default class PlayersApi {

    /**
    * Constructs a new PlayersApi. 
    * @alias module:api/PlayersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiPlayersAddApiPlayersPost operation.
     * @callback module:api/PlayersApi~apiPlayersAddApiPlayersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlayerList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a New Player
     * Adds a new player name to the list.  - **name**: The name of the player to add. It is taken from the form data.  This endpoint writes the new player's name to the players file, appending it to the end. If the operation is successful, it returns a success message. Otherwise, it raises an HTTPException.
     * @param {module:model/PlayerCreation} playerCreation 
     * @param {module:api/PlayersApi~apiPlayersAddApiPlayersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlayerList}
     */
    apiPlayersAddApiPlayersPost(playerCreation, callback) {
      let postBody = playerCreation;
      // verify the required parameter 'playerCreation' is set
      if (playerCreation === undefined || playerCreation === null) {
        throw new Error("Missing the required parameter 'playerCreation' when calling apiPlayersAddApiPlayersPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PlayerList;
      return this.apiClient.callApi(
        '/api/players', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPlayersApiPlayersGet operation.
     * @callback module:api/PlayersApi~apiPlayersApiPlayersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlayerList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Players
     * Retrieves a list of all unique player names.
     * @param {module:api/PlayersApi~apiPlayersApiPlayersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlayerList}
     */
    apiPlayersApiPlayersGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PlayerList;
      return this.apiClient.callApi(
        '/api/players', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPlayersSubmitApiPlayersSubmitPost operation.
     * @callback module:api/PlayersApi~apiPlayersSubmitApiPlayersSubmitPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BasicResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit Player Names
     * Submits a list of player names.  - **names**: A list of names to be submitted.  Accepts a list of names in the request body and submits them.
     * @param {module:model/PlayerList} playerList 
     * @param {module:api/PlayersApi~apiPlayersSubmitApiPlayersSubmitPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BasicResponse}
     */
    apiPlayersSubmitApiPlayersSubmitPost(playerList, callback) {
      let postBody = playerList;
      // verify the required parameter 'playerList' is set
      if (playerList === undefined || playerList === null) {
        throw new Error("Missing the required parameter 'playerList' when calling apiPlayersSubmitApiPlayersSubmitPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BasicResponse;
      return this.apiClient.callApi(
        '/api/players/submit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNameApiPlayersDelete operation.
     * @callback module:api/PlayersApi~deleteNameApiPlayersDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BasicResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Player
     * Deletes a player name from the list.  - **name**: The name of the player to delete.  This endpoint reads all player names, filters out the specified name, and rewrites the file without it. If the operation is successful, it returns a success message.
     * @param {String} name The name of the player to delete.
     * @param {module:api/PlayersApi~deleteNameApiPlayersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BasicResponse}
     */
    deleteNameApiPlayersDelete(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteNameApiPlayersDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'name': name
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BasicResponse;
      return this.apiClient.callApi(
        '/api/players/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
