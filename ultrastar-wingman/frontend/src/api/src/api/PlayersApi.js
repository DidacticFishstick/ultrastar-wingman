/**
 * UltraStar Wingman
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BasicResponse from '../model/BasicResponse';
import HTTPValidationError from '../model/HTTPValidationError';
import PlayerConfig from '../model/PlayerConfig';
import PlayerCreation from '../model/PlayerCreation';
import RegisteredPlayerModel from '../model/RegisteredPlayerModel';
import RegisteredPlayerPatchModel from '../model/RegisteredPlayerPatchModel';
import RegisteredPlayersModel from '../model/RegisteredPlayersModel';
import RegisteredPlayersPatchModel from '../model/RegisteredPlayersPatchModel';
import UnregisteredPlayerModel from '../model/UnregisteredPlayerModel';

/**
* Players service.
* @module api/PlayersApi
* @version 1.1.0
*/
export default class PlayersApi {

    /**
    * Constructs a new PlayersApi. 
    * @alias module:api/PlayersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiGetDefaultAvatarApiPlayersAvatarsDefaultColorGet operation.
     * @callback module:api/PlayersApi~apiGetDefaultAvatarApiPlayersAvatarsDefaultColorGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Api Get Default Avatar
     * The default avatars (cat pictures)  :param color: The color
     * @param {Object} color 
     * @param {module:api/PlayersApi~apiGetDefaultAvatarApiPlayersAvatarsDefaultColorGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    apiGetDefaultAvatarApiPlayersAvatarsDefaultColorGet(color, callback) {
      let postBody = null;
      // verify the required parameter 'color' is set
      if (color === undefined || color === null) {
        throw new Error("Missing the required parameter 'color' when calling apiGetDefaultAvatarApiPlayersAvatarsDefaultColorGet");
      }

      let pathParams = {
        'color': color
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/players/avatars/default/{color}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiGetPlayerAvatarApiPlayersRegisteredPlayerAvatarGet operation.
     * @callback module:api/PlayersApi~apiGetPlayerAvatarApiPlayersRegisteredPlayerAvatarGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Api Get Player Avatar
     * The avatar for the given player  :param player: The player id
     * @param {Object} player 
     * @param {module:api/PlayersApi~apiGetPlayerAvatarApiPlayersRegisteredPlayerAvatarGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    apiGetPlayerAvatarApiPlayersRegisteredPlayerAvatarGet(player, callback) {
      let postBody = null;
      // verify the required parameter 'player' is set
      if (player === undefined || player === null) {
        throw new Error("Missing the required parameter 'player' when calling apiGetPlayerAvatarApiPlayersRegisteredPlayerAvatarGet");
      }

      let pathParams = {
        'player': player
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/players/registered/{player}/avatar', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPlayersAddApiPlayersPost operation.
     * @callback module:api/PlayersApi~apiPlayersAddApiPlayersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnregisteredPlayerModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a New Player
     * Adds a new temporary player name to the list. If the operation is successful, it returns a success message. Otherwise, it raises an HTTPException.
     * @param {module:model/PlayerCreation} playerCreation 
     * @param {module:api/PlayersApi~apiPlayersAddApiPlayersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnregisteredPlayerModel}
     */
    apiPlayersAddApiPlayersPost(playerCreation, callback) {
      let postBody = playerCreation;
      // verify the required parameter 'playerCreation' is set
      if (playerCreation === undefined || playerCreation === null) {
        throw new Error("Missing the required parameter 'playerCreation' when calling apiPlayersAddApiPlayersPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UnregisteredPlayerModel;
      return this.apiClient.callApi(
        '/api/players', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPlayersApiPlayersGet operation.
     * @callback module:api/PlayersApi~apiPlayersApiPlayersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlayerConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Players
     * Retrieves a list of all unique player names and the available colors.
     * @param {module:api/PlayersApi~apiPlayersApiPlayersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlayerConfig}
     */
    apiPlayersApiPlayersGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PlayerConfig;
      return this.apiClient.callApi(
        '/api/players', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPlayersDeleteApiPlayersDelete operation.
     * @callback module:api/PlayersApi~apiPlayersDeleteApiPlayersDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BasicResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Player
     * Deletes a player name from the list. If the operation is successful, it returns a success message.
     * @param {String} id The id of the player to delete.
     * @param {module:api/PlayersApi~apiPlayersDeleteApiPlayersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BasicResponse}
     */
    apiPlayersDeleteApiPlayersDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiPlayersDeleteApiPlayersDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BasicResponse;
      return this.apiClient.callApi(
        '/api/players', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPostPlayerAvatarApiPlayersRegisteredPlayerAvatarPost operation.
     * @callback module:api/PlayersApi~apiPostPlayerAvatarApiPlayersRegisteredPlayerAvatarPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BasicResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload an avatar for the player
     * Sets the avatar for the given player  :param player: The player id :param user: The current user
     * @param {Object} player 
     * @param {File} file 
     * @param {module:api/PlayersApi~apiPostPlayerAvatarApiPlayersRegisteredPlayerAvatarPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BasicResponse}
     */
    apiPostPlayerAvatarApiPlayersRegisteredPlayerAvatarPost(player, file, callback) {
      let postBody = null;
      // verify the required parameter 'player' is set
      if (player === undefined || player === null) {
        throw new Error("Missing the required parameter 'player' when calling apiPostPlayerAvatarApiPlayersRegisteredPlayerAvatarPost");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling apiPostPlayerAvatarApiPlayersRegisteredPlayerAvatarPost");
      }

      let pathParams = {
        'player': player
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = BasicResponse;
      return this.apiClient.callApi(
        '/api/players/registered/{player}/avatar', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRegisteredPlayersApiPlayersRegisteredGet operation.
     * @callback module:api/PlayersApi~apiRegisteredPlayersApiPlayersRegisteredGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegisteredPlayersModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all registered Players
     * Retrieves a list of all registered players.
     * @param {module:api/PlayersApi~apiRegisteredPlayersApiPlayersRegisteredGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegisteredPlayersModel}
     */
    apiRegisteredPlayersApiPlayersRegisteredGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RegisteredPlayersModel;
      return this.apiClient.callApi(
        '/api/players/registered', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRegisteredPlayersApiPlayersRegisteredPatch operation.
     * @callback module:api/PlayersApi~apiRegisteredPlayersApiPlayersRegisteredPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegisteredPlayersModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch data for registered Players
     * Patches a list of registered players.
     * @param {module:model/RegisteredPlayersPatchModel} registeredPlayersPatchModel 
     * @param {module:api/PlayersApi~apiRegisteredPlayersApiPlayersRegisteredPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegisteredPlayersModel}
     */
    apiRegisteredPlayersApiPlayersRegisteredPatch(registeredPlayersPatchModel, callback) {
      let postBody = registeredPlayersPatchModel;
      // verify the required parameter 'registeredPlayersPatchModel' is set
      if (registeredPlayersPatchModel === undefined || registeredPlayersPatchModel === null) {
        throw new Error("Missing the required parameter 'registeredPlayersPatchModel' when calling apiRegisteredPlayersApiPlayersRegisteredPatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RegisteredPlayersModel;
      return this.apiClient.callApi(
        '/api/players/registered', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRegisteredPlayersApiPlayersRegisteredPlayerGet operation.
     * @callback module:api/PlayersApi~apiRegisteredPlayersApiPlayersRegisteredPlayerGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegisteredPlayerModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a specific registered Players
     * Retrieves a registered players.
     * @param {Object} player 
     * @param {module:api/PlayersApi~apiRegisteredPlayersApiPlayersRegisteredPlayerGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegisteredPlayerModel}
     */
    apiRegisteredPlayersApiPlayersRegisteredPlayerGet(player, callback) {
      let postBody = null;
      // verify the required parameter 'player' is set
      if (player === undefined || player === null) {
        throw new Error("Missing the required parameter 'player' when calling apiRegisteredPlayersApiPlayersRegisteredPlayerGet");
      }

      let pathParams = {
        'player': player
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RegisteredPlayerModel;
      return this.apiClient.callApi(
        '/api/players/registered/{player}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRegisteredPlayersApiPlayersRegisteredPlayerPatch operation.
     * @callback module:api/PlayersApi~apiRegisteredPlayersApiPlayersRegisteredPlayerPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegisteredPlayerModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch data for a specific player
     * Retrieves a registered players.
     * @param {Object} player 
     * @param {module:model/RegisteredPlayerPatchModel} registeredPlayerPatchModel 
     * @param {module:api/PlayersApi~apiRegisteredPlayersApiPlayersRegisteredPlayerPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegisteredPlayerModel}
     */
    apiRegisteredPlayersApiPlayersRegisteredPlayerPatch(player, registeredPlayerPatchModel, callback) {
      let postBody = registeredPlayerPatchModel;
      // verify the required parameter 'player' is set
      if (player === undefined || player === null) {
        throw new Error("Missing the required parameter 'player' when calling apiRegisteredPlayersApiPlayersRegisteredPlayerPatch");
      }
      // verify the required parameter 'registeredPlayerPatchModel' is set
      if (registeredPlayerPatchModel === undefined || registeredPlayerPatchModel === null) {
        throw new Error("Missing the required parameter 'registeredPlayerPatchModel' when calling apiRegisteredPlayersApiPlayersRegisteredPlayerPatch");
      }

      let pathParams = {
        'player': player
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RegisteredPlayerModel;
      return this.apiClient.callApi(
        '/api/players/registered/{player}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
