/**
 * UltraStar Wingman
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Song model module.
 * @module model/Song
 * @version 2.0.0
 */
class Song {
    /**
     * Constructs a new <code>Song</code>.
     * @alias module:model/Song
     * @param directory {String} The directory of the song.
     * @param title {String} The title of the song.
     * @param artist {String} The artist of the song.
     * @param usdbId {String} The USDB ID of the song.
     * @param id {String} The universal ID of the song.
     * @param duration {Number} The duration of the song in seconds.
     */
    constructor(directory, title, artist, usdbId, id, duration) { 
        
        Song.initialize(this, directory, title, artist, usdbId, id, duration);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, directory, title, artist, usdbId, id, duration) { 
        obj['directory'] = directory;
        obj['title'] = title;
        obj['artist'] = artist;
        obj['usdb_id'] = usdbId;
        obj['id'] = id;
        obj['duration'] = duration;
    }

    /**
     * Constructs a <code>Song</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Song} obj Optional instance to populate.
     * @return {module:model/Song} The populated <code>Song</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Song();

            if (data.hasOwnProperty('directory')) {
                obj['directory'] = ApiClient.convertToType(data['directory'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('artist')) {
                obj['artist'] = ApiClient.convertToType(data['artist'], 'String');
            }
            if (data.hasOwnProperty('usdb_id')) {
                obj['usdb_id'] = ApiClient.convertToType(data['usdb_id'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Song</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Song</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Song.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['directory'] && !(typeof data['directory'] === 'string' || data['directory'] instanceof String)) {
            throw new Error("Expected the field `directory` to be a primitive type in the JSON string but got " + data['directory']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['artist'] && !(typeof data['artist'] === 'string' || data['artist'] instanceof String)) {
            throw new Error("Expected the field `artist` to be a primitive type in the JSON string but got " + data['artist']);
        }
        // ensure the json data is a string
        if (data['usdb_id'] && !(typeof data['usdb_id'] === 'string' || data['usdb_id'] instanceof String)) {
            throw new Error("Expected the field `usdb_id` to be a primitive type in the JSON string but got " + data['usdb_id']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }

        return true;
    }


}

Song.RequiredProperties = ["directory", "title", "artist", "usdb_id", "id", "duration"];

/**
 * The directory of the song.
 * @member {String} directory
 */
Song.prototype['directory'] = undefined;

/**
 * The title of the song.
 * @member {String} title
 */
Song.prototype['title'] = undefined;

/**
 * The artist of the song.
 * @member {String} artist
 */
Song.prototype['artist'] = undefined;

/**
 * The USDB ID of the song.
 * @member {String} usdb_id
 */
Song.prototype['usdb_id'] = undefined;

/**
 * The universal ID of the song.
 * @member {String} id
 */
Song.prototype['id'] = undefined;

/**
 * The duration of the song in seconds.
 * @member {Number} duration
 */
Song.prototype['duration'] = undefined;






export default Song;

