/**
 * UltraStar Wingman
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SpotifySong model module.
 * @module model/SpotifySong
 * @version 2.0.0
 */
class SpotifySong {
    /**
     * Constructs a new <code>SpotifySong</code>.
     * @alias module:model/SpotifySong
     * @param id {String} The Spotify ID for the track.
     * @param name {String} The name of the track.
     * @param image {String} The url for the song cover.
     * @param artists {Array.<String>} List of artists.
     */
    constructor(id, name, image, artists) { 
        
        SpotifySong.initialize(this, id, name, image, artists);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name, image, artists) { 
        obj['id'] = id;
        obj['name'] = name;
        obj['image'] = image;
        obj['artists'] = artists;
    }

    /**
     * Constructs a <code>SpotifySong</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SpotifySong} obj Optional instance to populate.
     * @return {module:model/SpotifySong} The populated <code>SpotifySong</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SpotifySong();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ApiClient.convertToType(data['image'], 'String');
            }
            if (data.hasOwnProperty('artists')) {
                obj['artists'] = ApiClient.convertToType(data['artists'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SpotifySong</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SpotifySong</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SpotifySong.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['image'] && !(typeof data['image'] === 'string' || data['image'] instanceof String)) {
            throw new Error("Expected the field `image` to be a primitive type in the JSON string but got " + data['image']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['artists'])) {
            throw new Error("Expected the field `artists` to be an array in the JSON data but got " + data['artists']);
        }

        return true;
    }


}

SpotifySong.RequiredProperties = ["id", "name", "image", "artists"];

/**
 * The Spotify ID for the track.
 * @member {String} id
 */
SpotifySong.prototype['id'] = undefined;

/**
 * The name of the track.
 * @member {String} name
 */
SpotifySong.prototype['name'] = undefined;

/**
 * The url for the song cover.
 * @member {String} image
 */
SpotifySong.prototype['image'] = undefined;

/**
 * List of artists.
 * @member {Array.<String>} artists
 */
SpotifySong.prototype['artists'] = undefined;






export default SpotifySong;

