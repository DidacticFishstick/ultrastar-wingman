/**
 * UltraStar Wingman
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Score model module.
 * @module model/Score
 * @version 2.0.0
 */
class Score {
    /**
     * Constructs a new <code>Score</code>.
     * @alias module:model/Score
     */
    constructor() { 
        
        Score.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Score</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Score} obj Optional instance to populate.
     * @return {module:model/Score} The populated <code>Score</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Score();

            if (data.hasOwnProperty('usdx_id')) {
                obj['usdx_id'] = ApiClient.convertToType(data['usdx_id'], 'Number');
            }
            if (data.hasOwnProperty('artist')) {
                obj['artist'] = ApiClient.convertToType(data['artist'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('song_id')) {
                obj['song_id'] = ApiClient.convertToType(data['song_id'], 'String');
            }
            if (data.hasOwnProperty('difficulty')) {
                obj['difficulty'] = ApiClient.convertToType(data['difficulty'], 'Number');
            }
            if (data.hasOwnProperty('player')) {
                obj['player'] = ApiClient.convertToType(data['player'], 'String');
            }
            if (data.hasOwnProperty('score')) {
                obj['score'] = ApiClient.convertToType(data['score'], 'Number');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Score</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Score</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['artist'] && !(typeof data['artist'] === 'string' || data['artist'] instanceof String)) {
            throw new Error("Expected the field `artist` to be a primitive type in the JSON string but got " + data['artist']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['song_id'] && !(typeof data['song_id'] === 'string' || data['song_id'] instanceof String)) {
            throw new Error("Expected the field `song_id` to be a primitive type in the JSON string but got " + data['song_id']);
        }
        // ensure the json data is a string
        if (data['player'] && !(typeof data['player'] === 'string' || data['player'] instanceof String)) {
            throw new Error("Expected the field `player` to be a primitive type in the JSON string but got " + data['player']);
        }

        return true;
    }


}



/**
 * The id internally used by UltraStar Deluxe
 * @member {Number} usdx_id
 */
Score.prototype['usdx_id'] = undefined;

/**
 * The artist of the song.
 * @member {String} artist
 */
Score.prototype['artist'] = undefined;

/**
 * The title of the song.
 * @member {String} title
 */
Score.prototype['title'] = undefined;

/**
 * The id of the song (must not be the correct one as it has to be matched by title and artist :/).
 * @member {String} song_id
 */
Score.prototype['song_id'] = undefined;

/**
 * The difficulty of the song.
 * @member {Number} difficulty
 */
Score.prototype['difficulty'] = undefined;

/**
 * The player name.
 * @member {String} player
 */
Score.prototype['player'] = undefined;

/**
 * The score of the performance.
 * @member {Number} score
 */
Score.prototype['score'] = undefined;

/**
 * The date of the performance.
 * @member {Number} date
 */
Score.prototype['date'] = undefined;






export default Score;

