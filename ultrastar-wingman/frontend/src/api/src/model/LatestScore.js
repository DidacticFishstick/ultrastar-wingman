/**
 * UltraStar Wingman
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Score from './Score';
import Song from './Song';

/**
 * The LatestScore model module.
 * @module model/LatestScore
 * @version 2.0.0
 */
class LatestScore {
    /**
     * Constructs a new <code>LatestScore</code>.
     * @alias module:model/LatestScore
     * @param song {module:model/Song} 
     */
    constructor(song) { 
        
        LatestScore.initialize(this, song);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, song) { 
        obj['song'] = song;
    }

    /**
     * Constructs a <code>LatestScore</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LatestScore} obj Optional instance to populate.
     * @return {module:model/LatestScore} The populated <code>LatestScore</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LatestScore();

            if (data.hasOwnProperty('song')) {
                obj['song'] = Song.constructFromObject(data['song']);
            }
            if (data.hasOwnProperty('new_scores')) {
                obj['new_scores'] = ApiClient.convertToType(data['new_scores'], [Score]);
            }
            if (data.hasOwnProperty('all_scores')) {
                obj['all_scores'] = ApiClient.convertToType(data['all_scores'], [Score]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LatestScore</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LatestScore</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LatestScore.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `song`
        if (data['song']) { // data not null
          Song.validateJSON(data['song']);
        }
        if (data['new_scores']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['new_scores'])) {
                throw new Error("Expected the field `new_scores` to be an array in the JSON data but got " + data['new_scores']);
            }
            // validate the optional field `new_scores` (array)
            for (const item of data['new_scores']) {
                Score.validateJSON(item);
            };
        }
        if (data['all_scores']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['all_scores'])) {
                throw new Error("Expected the field `all_scores` to be an array in the JSON data but got " + data['all_scores']);
            }
            // validate the optional field `all_scores` (array)
            for (const item of data['all_scores']) {
                Score.validateJSON(item);
            };
        }

        return true;
    }


}

LatestScore.RequiredProperties = ["song"];

/**
 * @member {module:model/Song} song
 */
LatestScore.prototype['song'] = undefined;

/**
 * The scores of the latest singing.
 * @member {Array.<module:model/Score>} new_scores
 */
LatestScore.prototype['new_scores'] = undefined;

/**
 * All scores for the song.
 * @member {Array.<module:model/Score>} all_scores
 */
LatestScore.prototype['all_scores'] = undefined;






export default LatestScore;

